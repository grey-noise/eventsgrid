// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

/*
Package routeguide is a generated protocol buffer package.

It is generated from these files:
	events.proto

It has these top-level messages:
	Cursor
	Header
	Event
	Acknowledge
*/
package routeguide

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Cursor struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Ts int64  `protobuf:"varint,2,opt,name=ts" json:"ts,omitempty"`
}

func (m *Cursor) Reset()                    { *m = Cursor{} }
func (m *Cursor) String() string            { return proto.CompactTextString(m) }
func (*Cursor) ProtoMessage()               {}
func (*Cursor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Cursor) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Cursor) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

type Header struct {
	ClientId    string `protobuf:"bytes,1,opt,name=clientId" json:"clientId,omitempty"`
	GroupId     string `protobuf:"bytes,2,opt,name=groupId" json:"groupId,omitempty"`
	EventTypeId string `protobuf:"bytes,3,opt,name=eventTypeId" json:"eventTypeId,omitempty"`
	Eventid     string `protobuf:"bytes,4,opt,name=eventid" json:"eventid,omitempty"`
	Source      string `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Header) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Header) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Header) GetEventTypeId() string {
	if m != nil {
		return m.EventTypeId
	}
	return ""
}

func (m *Header) GetEventid() string {
	if m != nil {
		return m.Eventid
	}
	return ""
}

func (m *Header) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type Event struct {
	Cursor  *Cursor `protobuf:"bytes,1,opt,name=cursor" json:"cursor,omitempty"`
	Header  *Header `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	Payload []byte  `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Event) GetCursor() *Cursor {
	if m != nil {
		return m.Cursor
	}
	return nil
}

func (m *Event) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Event) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Acknowledge struct {
	Cursor *Cursor `protobuf:"bytes,1,opt,name=cursor" json:"cursor,omitempty"`
	Header *Header `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
}

func (m *Acknowledge) Reset()                    { *m = Acknowledge{} }
func (m *Acknowledge) String() string            { return proto.CompactTextString(m) }
func (*Acknowledge) ProtoMessage()               {}
func (*Acknowledge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Acknowledge) GetCursor() *Cursor {
	if m != nil {
		return m.Cursor
	}
	return nil
}

func (m *Acknowledge) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*Cursor)(nil), "routeguide.Cursor")
	proto.RegisterType((*Header)(nil), "routeguide.Header")
	proto.RegisterType((*Event)(nil), "routeguide.Event")
	proto.RegisterType((*Acknowledge)(nil), "routeguide.Acknowledge")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventsSender service

type EventsSenderClient interface {
	ListFeatures(ctx context.Context, in *Acknowledge, opts ...grpc.CallOption) (EventsSender_ListFeaturesClient, error)
}

type eventsSenderClient struct {
	cc *grpc.ClientConn
}

func NewEventsSenderClient(cc *grpc.ClientConn) EventsSenderClient {
	return &eventsSenderClient{cc}
}

func (c *eventsSenderClient) ListFeatures(ctx context.Context, in *Acknowledge, opts ...grpc.CallOption) (EventsSender_ListFeaturesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventsSender_serviceDesc.Streams[0], c.cc, "/routeguide.EventsSender/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsSenderListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventsSender_ListFeaturesClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventsSenderListFeaturesClient struct {
	grpc.ClientStream
}

func (x *eventsSenderListFeaturesClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventsSender service

type EventsSenderServer interface {
	ListFeatures(*Acknowledge, EventsSender_ListFeaturesServer) error
}

func RegisterEventsSenderServer(s *grpc.Server, srv EventsSenderServer) {
	s.RegisterService(&_EventsSender_serviceDesc, srv)
}

func _EventsSender_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Acknowledge)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsSenderServer).ListFeatures(m, &eventsSenderListFeaturesServer{stream})
}

type EventsSender_ListFeaturesServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventsSenderListFeaturesServer struct {
	grpc.ServerStream
}

func (x *eventsSenderListFeaturesServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _EventsSender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routeguide.EventsSender",
	HandlerType: (*EventsSenderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _EventsSender_ListFeatures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events.proto",
}

func init() { proto.RegisterFile("events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xcd, 0x4a, 0xfb, 0x40,
	0x14, 0xc5, 0xff, 0x49, 0xdb, 0xfc, 0xed, 0x6d, 0x50, 0x9c, 0x85, 0x86, 0xba, 0x29, 0x59, 0x15,
	0x17, 0xa1, 0xd4, 0xbd, 0x60, 0xc5, 0x8f, 0x82, 0x48, 0x19, 0x7d, 0x81, 0x98, 0xb9, 0xc4, 0xc1,
	0x98, 0x09, 0xf3, 0xa1, 0xf6, 0x35, 0x7c, 0x62, 0x99, 0x9b, 0x54, 0x83, 0x7b, 0x77, 0xf7, 0xcc,
	0x3d, 0x67, 0xf8, 0x1d, 0xb8, 0x10, 0xe3, 0x1b, 0xd6, 0xd6, 0x64, 0x8d, 0x56, 0x56, 0x31, 0xd0,
	0xca, 0x59, 0x2c, 0x9d, 0x14, 0x98, 0xce, 0x21, 0xba, 0x74, 0xda, 0x28, 0xcd, 0xf6, 0x21, 0x94,
	0x22, 0x09, 0x66, 0xc1, 0x7c, 0xc8, 0x43, 0x29, 0xbc, 0xb6, 0x26, 0x09, 0x67, 0xc1, 0x7c, 0xc0,
	0x43, 0x6b, 0xd2, 0xcf, 0x00, 0xa2, 0x5b, 0xcc, 0x05, 0x6a, 0x36, 0x85, 0xbd, 0xa2, 0x92, 0x58,
	0xdb, 0x75, 0x1b, 0x18, 0xf3, 0x6f, 0xcd, 0x12, 0xf8, 0x5f, 0x6a, 0xe5, 0x9a, 0xb5, 0xa0, 0xec,
	0x98, 0xef, 0x24, 0x9b, 0xc1, 0x84, 0x30, 0x1e, 0xb7, 0x0d, 0xae, 0x45, 0x32, 0xa0, 0x6d, 0xff,
	0xc9, 0x67, 0x49, 0x4a, 0x91, 0x0c, 0xdb, 0x6c, 0x27, 0xd9, 0x11, 0x44, 0x46, 0x39, 0x5d, 0x60,
	0x32, 0xa2, 0x45, 0xa7, 0xd2, 0x2d, 0x8c, 0xae, 0xbc, 0x85, 0x9d, 0x42, 0x54, 0x50, 0x0f, 0x02,
	0x9a, 0x2c, 0x59, 0xf6, 0x53, 0x32, 0x6b, 0x1b, 0xf2, 0xce, 0xe1, 0xbd, 0xcf, 0x54, 0x84, 0x08,
	0x7f, 0x79, 0xdb, 0x8a, 0xbc, 0x73, 0x78, 0xa4, 0x26, 0xdf, 0x56, 0x2a, 0x6f, 0x81, 0x63, 0xbe,
	0x93, 0x29, 0xc2, 0xe4, 0xa2, 0x78, 0xa9, 0xd5, 0x7b, 0x85, 0xa2, 0xc4, 0xbf, 0x02, 0x58, 0xde,
	0x43, 0x4c, 0x0d, 0xcd, 0x03, 0xd6, 0x1e, 0xe8, 0x1c, 0xe2, 0x3b, 0x69, 0xec, 0x35, 0xe6, 0xd6,
	0x69, 0x34, 0xec, 0xb8, 0x9f, 0xed, 0x01, 0x4d, 0x0f, 0xfb, 0x0b, 0xfa, 0x22, 0xfd, 0xb7, 0x08,
	0x56, 0x0b, 0x38, 0x91, 0x2a, 0x2b, 0x75, 0x53, 0x64, 0xf8, 0x91, 0xbf, 0x36, 0x15, 0x9a, 0x9e,
	0x71, 0x75, 0xc0, 0xfd, 0x7c, 0xe3, 0xe7, 0x8d, 0x3f, 0x96, 0x4d, 0xf0, 0x14, 0xd1, 0xd5, 0x9c,
	0x7d, 0x05, 0x00, 0x00, 0xff, 0xff, 0xef, 0x42, 0xe2, 0xa1, 0x45, 0x02, 0x00, 0x00,
}
